using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var formulaOne = FormulaOne.FromJson(jsonString);

namespace F1_Manager.Models
{
    public partial class FormulaOne
    {
        [JsonProperty("generated_at")] public DateTimeOffset GeneratedAt { get; set; }

        [JsonProperty("schema")] public Uri Schema { get; set; }

        [JsonProperty("stage")] public FormulaOneStage Stage { get; set; }
    }

    public partial class FormulaOneStage
    {
        [JsonProperty("id")] public string Id { get; set; }

        [JsonProperty("description")] public string Description { get; set; }

        [JsonProperty("scheduled")] public DateTimeOffset Scheduled { get; set; }

        [JsonProperty("scheduled_end")] public DateTimeOffset ScheduledEnd { get; set; }

        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("parents")] public Parent[] Parents { get; set; }

        [JsonProperty("stages")] public StageElement[] Stages { get; set; }

        [JsonProperty("competitors")] public Competitor[] Competitors { get; set; }

        [JsonProperty("teams")] public Team[] Teams { get; set; }
    }

    public partial class Competitor
    {
        [JsonProperty("Id")] public string Id { get; set; }

        
        [JsonProperty("Name")] public string Name { get; set; }

        [JsonProperty("Gender")] public Gender Gender { get; set; }

        [JsonProperty("Nationality")] public string Nationality { get; set; }

        [JsonProperty("Country_code")] public string CountryCode { get; set; }

        [JsonProperty("Team")] public Team Team { get; set; }

        [JsonProperty("Result")] public CompetitorResult Result { get; set; }

        public int PreviousPoints { get; set; }

        [JsonProperty("Points")] public long Points { get; set; }

    }

    public partial class CompetitorResult
    {
        [JsonProperty("points")] public long Points { get; set; }

        [JsonProperty("car_number")] public long CarNumber { get; set; }

        [JsonProperty("position")] public long Position { get; set; }

        [JsonProperty("victories", NullValueHandling = NullValueHandling.Ignore)]
        public long? Victories { get; set; }

        [JsonProperty("races")] public long Races { get; set; }

        [JsonProperty("races_with_points")] public long RacesWithPoints { get; set; }

        [JsonProperty("polepositions", NullValueHandling = NullValueHandling.Ignore)]
        public long? Polepositions { get; set; }

        [JsonProperty("podiums", NullValueHandling = NullValueHandling.Ignore)]
        public long? Podiums { get; set; }

        [JsonProperty("fastest_laps", NullValueHandling = NullValueHandling.Ignore)]
        public long? FastestLaps { get; set; }
    }

    public partial class Team
    {
        [JsonProperty("id")] public string Id { get; set; }

        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("gender")] public Gender Gender { get; set; }

        [JsonProperty("nationality")] public Nationality Nationality { get; set; }

        [JsonProperty("country_code")] public CountryCode CountryCode { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public TeamResult Result { get; set; }
    }

    public partial class TeamResult
    {
        [JsonProperty("points")] public long Points { get; set; }

        [JsonProperty("position")] public long Position { get; set; }

        [JsonProperty("victories", NullValueHandling = NullValueHandling.Ignore)]
        public long? Victories { get; set; }

        [JsonProperty("races")] public long Races { get; set; }

        [JsonProperty("races_with_points")] public long RacesWithPoints { get; set; }

        [JsonProperty("polepositions", NullValueHandling = NullValueHandling.Ignore)]
        public long? Polepositions { get; set; }

        [JsonProperty("podiums", NullValueHandling = NullValueHandling.Ignore)]
        public long? Podiums { get; set; }

        [JsonProperty("fastest_laps", NullValueHandling = NullValueHandling.Ignore)]
        public long? FastestLaps { get; set; }

        [JsonProperty("podiums_both_drivers", NullValueHandling = NullValueHandling.Ignore)]
        public long? PodiumsBothDrivers { get; set; }

        [JsonProperty("points_both_drivers", NullValueHandling = NullValueHandling.Ignore)]
        public long? PointsBothDrivers { get; set; }

        [JsonProperty("double_victories", NullValueHandling = NullValueHandling.Ignore)]
        public long? DoubleVictories { get; set; }
    }

    public partial class Parent
    {
        [JsonProperty("id")] public string Id { get; set; }

        [JsonProperty("description")] public string Description { get; set; }

        [JsonProperty("type")] public string Type { get; set; }
    }

    public partial class StageElement
    {
        [JsonProperty("id")] public string Id { get; set; }

        [JsonProperty("description")] public string Description { get; set; }

        [JsonProperty("scheduled")] public DateTimeOffset Scheduled { get; set; }

        [JsonProperty("scheduled_end")] public DateTimeOffset ScheduledEnd { get; set; }

        [JsonProperty("type")] public TypeEnum Type { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public Status? Status { get; set; }
    }

    public enum Gender
    {
        Male
    };

    public enum CountryCode
    {
        Che,
        Gbr,
        Ita,
        Usa
    };

    public enum Nationality
    {
        GreatBritain,
        Italy,
        Switzerland,
        Usa
    };

    public enum Status
    {
        Finished
    };

    public enum TypeEnum
    {
        Event
    };

    public partial class FormulaOne
    {
        public static FormulaOne FromJson(string json) =>
            JsonConvert.DeserializeObject<FormulaOne>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this FormulaOne self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GenderConverter.Singleton,
                CountryCodeConverter.Singleton,
                NationalityConverter.Singleton,
                StatusConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }

    internal class GenderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gender) || t == typeof(Gender?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "male")
            {
                return Gender.Male;
            }

            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (Gender)untypedValue;
            if (value == Gender.Male)
            {
                serializer.Serialize(writer, "male");
                return;
            }

            throw new Exception("Cannot marshal type Gender");
        }

        public static readonly GenderConverter Singleton = new GenderConverter();
    }

    internal class CountryCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CountryCode) || t == typeof(CountryCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CHE":
                    return CountryCode.Che;
                case "GBR":
                    return CountryCode.Gbr;
                case "ITA":
                    return CountryCode.Ita;
                case "USA":
                    return CountryCode.Usa;
            }

            throw new Exception("Cannot unmarshal type CountryCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (CountryCode)untypedValue;
            switch (value)
            {
                case CountryCode.Che:
                    serializer.Serialize(writer, "CHE");
                    return;
                case CountryCode.Gbr:
                    serializer.Serialize(writer, "GBR");
                    return;
                case CountryCode.Ita:
                    serializer.Serialize(writer, "ITA");
                    return;
                case CountryCode.Usa:
                    serializer.Serialize(writer, "USA");
                    return;
            }

            throw new Exception("Cannot marshal type CountryCode");
        }

        public static readonly CountryCodeConverter Singleton = new CountryCodeConverter();
    }

    internal class NationalityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Nationality) || t == typeof(Nationality?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Great Britain":
                    return Nationality.GreatBritain;
                case "Italy":
                    return Nationality.Italy;
                case "Switzerland":
                    return Nationality.Switzerland;
                case "USA":
                    return Nationality.Usa;
            }

            throw new Exception("Cannot unmarshal type Nationality");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (Nationality)untypedValue;
            switch (value)
            {
                case Nationality.GreatBritain:
                    serializer.Serialize(writer, "Great Britain");
                    return;
                case Nationality.Italy:
                    serializer.Serialize(writer, "Italy");
                    return;
                case Nationality.Switzerland:
                    serializer.Serialize(writer, "Switzerland");
                    return;
                case Nationality.Usa:
                    serializer.Serialize(writer, "USA");
                    return;
            }

            throw new Exception("Cannot marshal type Nationality");
        }

        public static readonly NationalityConverter Singleton = new NationalityConverter();
    }

    internal class StatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Finished")
            {
                return Status.Finished;
            }

            throw new Exception("Cannot unmarshal type Status");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (Status)untypedValue;
            if (value == Status.Finished)
            {
                serializer.Serialize(writer, "Finished");
                return;
            }

            throw new Exception("Cannot marshal type Status");
        }

        public static readonly StatusConverter Singleton = new StatusConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "event")
            {
                return TypeEnum.Event;
            }

            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Event)
            {
                serializer.Serialize(writer, "event");
                return;
            }

            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}